---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import BentoGrid from '../components/BentoGrid.astro';

// Get all blog posts
const allPosts = await getCollection('blog');

// Sort posts by date (newest first)
const posts = allPosts.sort((a, b) => {
  return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
});

// Get unique categories
const categories = [...new Set(allPosts.flatMap(post => post.data.categories))];

// Get unique tags
const tags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];

// Get featured posts - either marked as featured or just the most recent
const featuredPosts = posts.filter(post => post.data.featured).length > 0
  ? posts.filter(post => post.data.featured)
  : posts.slice(0, Math.min(3, posts.length));

// Get posts for different sections
const recentPosts = posts.slice(0, Math.min(5, posts.length));
---

<Layout title="Blog" description="Articles and insights on product management, software development, UX design, and more">
  <div class="blog-page">
    <section class="blog-hero">
      <h1>My Blog</h1>
      <p class="lead">Thoughts on product management, software development, and technology trends</p>
    </section>

    <section class="blog-filters">
      <div class="filter-container">
        <input type="text" id="blog-search" placeholder="Search articles..." class="search-input">
        <div class="category-filters">
          <button class="filter-btn active" data-category="all">All</button>
          {categories.map(category => (
            <button class="filter-btn" data-category={category}>{category}</button>
          ))}
        </div>
      </div>
    </section>

    <div class="blog-layout">
      <section class="blog-content">
        {featuredPosts.length > 0 && (
          <div class="featured-section">
            <h2 class="section-title">Featured Posts</h2>
            <BentoGrid posts={featuredPosts} layout="featured" maxPosts={5} />
          </div>
        )}

        <div class="recent-posts-section">
          <h2 class="section-title">Recent Articles</h2>
          <BentoGrid posts={recentPosts} layout="default" maxPosts={5} />
        </div>

        <div class="all-posts-section">
          <h2 class="section-title">All Articles</h2>
          <BentoGrid posts={posts} layout="compact" showExcerpt={false} />
          
          <div id="no-results-message" class="no-results-message" style="display: none;">
            <p>No posts match your search criteria.</p>
          </div>
        </div>
      </section>

      <aside class="blog-sidebar">
        <div class="sidebar-widget">
          <h3 class="widget-title">Categories</h3>
          <ul class="category-list">
            <li class="category-item">
              <a href="#" class="category-link active" data-category="all">All Categories</a>
            </li>
            {categories.map(category => (
              <li class="category-item">
                <a href="#" class="category-link" data-category={category}>{category}</a>
              </li>
            ))}
          </ul>
        </div>

        {tags.length > 0 && (
          <div class="sidebar-widget">
            <h3 class="widget-title">Popular Tags</h3>
            <div class="tags-cloud">
              {tags.map(tag => (
                <a href="#" class="tag-link" data-tag={tag}>{tag}</a>
              ))}
            </div>
          </div>
        )}

        <div class="sidebar-widget">
          <h3 class="widget-title">Subscribe</h3>
          <div class="subscribe-form">
            <p>Get notified about new articles and updates.</p>
            <div class="form-group">
              <input type="email" placeholder="Your email address" class="form-input">
              <button class="btn btn-primary">Subscribe</button>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Filter functionality with proper TypeScript types
    const filterBtns = document.querySelectorAll<HTMLButtonElement>('.filter-btn');
    const categoryLinks = document.querySelectorAll<HTMLAnchorElement>('.category-link');
    const tagLinks = document.querySelectorAll<HTMLAnchorElement>('.tag-link');
    const searchInput = document.getElementById('blog-search') as HTMLInputElement | null;
    const bentoItems = document.querySelectorAll<HTMLElement>('.bento-item');
    const noResultsMessage = document.getElementById('no-results-message') as HTMLDivElement | null;
    
    // For tracking active filters
    let activeCategory: string = 'all';
    let activeTag: string | null = null;
    let searchTerm: string = '';
    
    // Apply filters based on current state
    function applyFilters(): void {
      let visibleItems: number = 0;
      
      bentoItems.forEach((item) => {
        let shouldShow: boolean = true;
        
        // Category filtering
        if (activeCategory !== 'all') {
          const categories = Array.from(item.querySelectorAll<HTMLElement>('.bento-category'))
            .map(cat => cat.textContent?.trim() || '');
          if (!categories.includes(activeCategory)) {
            shouldShow = false;
          }
        }
        
        // Tag filtering
        if (shouldShow && activeTag) {
          const titleElement = item.querySelector<HTMLElement>('.bento-title');
          const excerptElement = item.querySelector<HTMLElement>('.bento-excerpt');
          
          // Use nullish coalescing to ensure we have string values
          const title = titleElement?.textContent?.toLowerCase() || '';
          const excerpt = excerptElement?.textContent?.toLowerCase() || '';
          const allText = title + ' ' + excerpt;
          
          if (!allText.includes(activeTag.toLowerCase())) {
            shouldShow = false;
          }
        }
        
        // Search term filtering
        if (shouldShow && searchTerm) {
          const titleElement = item.querySelector<HTMLElement>('.bento-title');
          const excerptElement = item.querySelector<HTMLElement>('.bento-excerpt');
          
          // Use nullish coalescing for safe property access
          const title = titleElement?.textContent?.toLowerCase() || '';
          const excerpt = excerptElement?.textContent?.toLowerCase() || '';
          const categories = Array.from(item.querySelectorAll<HTMLElement>('.bento-category'))
            .map(cat => cat.textContent?.trim().toLowerCase() || '');
          
          const matches = title.includes(searchTerm.toLowerCase()) || 
                          excerpt.includes(searchTerm.toLowerCase()) ||
                          categories.some(cat => cat.includes(searchTerm.toLowerCase()));
          
          if (!matches) {
            shouldShow = false;
          }
        }
        
        // Set visibility and count visible items
        item.style.display = shouldShow ? 'flex' : 'none';
        if (shouldShow) visibleItems++;
      });
      
      // Show/hide no results message
      if (noResultsMessage) {
        noResultsMessage.style.display = visibleItems === 0 ? 'block' : 'none';
      }
      
      // Hide entire sections if all items are hidden
      document.querySelectorAll<HTMLElement>('.featured-section, .recent-posts-section, .all-posts-section').forEach(section => {
        const visibleInSection = Array.from(section.querySelectorAll<HTMLElement>('.bento-item')).some(item => 
          item.style.display !== 'none'
        );
        
        // Never hide "All Articles" section which contains the no results message
        if (section.classList.contains('all-posts-section')) {
          section.style.display = 'block';
        } else {
          section.style.display = visibleInSection ? 'block' : 'none';
        }
      });
    }
    
    // Category filter buttons
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Update category link in sidebar
        categoryLinks.forEach(link => {
          link.classList.toggle('active', link.dataset.category === btn.dataset.category);
        });
        
        // Use nullish coalescing to ensure we have a valid string
        activeCategory = btn.dataset.category || 'all';
        applyFilters();
      });
    });
    
    // Category sidebar links
    categoryLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        
        categoryLinks.forEach(l => l.classList.remove('active'));
        link.classList.add('active');
        
        // Update filter buttons in top bar
        filterBtns.forEach(btn => {
          btn.classList.toggle('active', btn.dataset.category === link.dataset.category);
        });
        
        // Use nullish coalescing to ensure we have a valid string
        activeCategory = link.dataset.category || 'all';
        applyFilters();
      });
    });
    
    // Tag links
    tagLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Toggle active state
        if (link.classList.contains('active')) {
          link.classList.remove('active');
          activeTag = null;
        } else {
          tagLinks.forEach(l => l.classList.remove('active'));
          link.classList.add('active');
          activeTag = link.dataset.tag || null;
        }
        
        applyFilters();
      });
    });
    
    // Search input
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        searchTerm = searchInput.value.trim();
        applyFilters();
      });
    }
    
    // Handle URL parameters for direct filtering
    function handleUrlParams(): void {
      const urlParams = new URLSearchParams(window.location.search);
      const categoryParam = urlParams.get('category');
      const tagParam = urlParams.get('tag');
      const searchParam = urlParams.get('search');
      
      if (categoryParam) {
        const categoryLink = Array.from(categoryLinks).find(link => 
          (link.dataset.category || '').toLowerCase() === categoryParam.toLowerCase()
        );
        
        if (categoryLink) {
          categoryLink.click();
        }
      }
      
      if (tagParam) {
        const tagLink = Array.from(tagLinks).find(link => 
          (link.dataset.tag || '').toLowerCase() === tagParam.toLowerCase()
        );
        
        if (tagLink) {
          tagLink.click();
        }
      }
      
      if (searchParam && searchInput) {
        searchInput.value = searchParam;
        searchTerm = searchParam;
        applyFilters();
      }
    }
    
    // Initialize
    handleUrlParams();
  });
</script>

<style>
  .blog-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .blog-hero {
    text-align: center;
    padding: 4rem 0 3rem;
    position: relative;
    overflow: hidden;
  }
  
  .blog-hero::before {
    content: '';
    position: absolute;
    top: -2rem;
    left: -10%;
    width: 120%;
    height: 100%;
    background: linear-gradient(135deg, rgba(121, 148, 150, 0.1), rgba(172, 193, 150, 0.1));
    transform: skewY(-2deg);
    z-index: -1;
  }
  
  .blog-hero h1 {
    font-size: 3.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--primary-color), var(--primary-dark));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    transition: all 0.3s ease;
  }
  
  .blog-hero .lead {
    font-size: 1.25rem;
    max-width: 700px;
    margin: 0 auto;
    color: var(--text-light);
  }
  
  .blog-filters {
    margin-bottom: 2.5rem;
  }
  
  .filter-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .search-input {
    width: 100%;
    max-width: 500px;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color), 0.1);
  }
  
  .category-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  
  .filter-btn {
    background: white;
    border: 1px solid var(--border-color);
    padding: 0.5rem 1.25rem;
    border-radius: 30px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  
  .filter-btn:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
  }
  
  .filter-btn.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }
  
  .blog-layout {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 3rem;
    margin-top: 1rem;
  }
  
  .section-title {
    font-size: 1.75rem;
    margin-bottom: 1.75rem;
    position: relative;
    display: inline-block;
    padding-bottom: 0.5rem;
  }
  
  .section-title::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 60px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 3px;
  }
  
  .featured-section {
    margin-bottom: 4rem;
  }
  
  .recent-posts-section {
    margin-bottom: 4rem;
  }
  
  .all-posts-section {
    margin-bottom: 4rem;
  }
  
  .no-results-message {
    padding: 3rem 1rem;
    text-align: center;
    color: var(--text-light);
    font-size: 1.1rem;
    background: rgba(0, 0, 0, 0.02);
    border-radius: 8px;
    margin-top: 2rem;
  }
  
  /* Sidebar */
  .blog-sidebar {
    align-self: start;
    position: sticky;
    top: 2rem;
  }
  
  .sidebar-widget {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: var(--card-shadow);
    margin-bottom: 2rem;
    transition: all 0.3s ease;
  }
  
  .sidebar-widget:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
  }
  
  .widget-title {
    margin-bottom: 1.25rem;
    position: relative;
    padding-bottom: 0.75rem;
    font-size: 1.25rem;
  }
  
  .widget-title::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 40px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 3px;
  }
  
  .category-list {
    list-style: none;
    padding: 0;
  }
  
  .category-item {
    margin-bottom: 0.75rem;
  }
  
  .category-link {
    display: block;
    color: var(--text-color);
    text-decoration: none;
    transition: all 0.2s ease;
    padding: 0.4rem 0;
    position: relative;
  }
  
  .category-link::before {
    content: '→';
    position: absolute;
    left: -1rem;
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.2s ease;
  }
  
  .category-link:hover::before,
  .category-link.active::before {
    opacity: 1;
    transform: translateX(0);
  }
  
  .category-link:hover,
  .category-link.active {
    color: var(--primary-color);
    transform: translateX(5px);
  }
  
  .tags-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag-link {
    background: var(--background-alt);
    color: var(--text-light);
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  .tag-link:hover,
  .tag-link.active {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
  }
  
  .subscribe-form p {
    margin-bottom: 1.5rem;
    color: var(--text-light);
  }
  
  .form-group {
    display: grid;
    gap: 0.75rem;
  }
  
  .form-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 0.9rem;
    transition: all 0.3s ease;
  }
  
  .form-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color), 0.1);
  }
  
  .btn.btn-primary {
    padding: 0.75rem 1.5rem;
    width: 100%;
    border-radius: 8px;
    font-size: 0.95rem;
    letter-spacing: 0.5px;
  }
  
  /* Animation for bento items */
  .bento-item {
    opacity: 0;
    transform: translateY(20px);
    animation: fade-in-up 0.6s ease forwards;
  }
  
  @keyframes fade-in-up {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .bento-item:nth-child(1) { animation-delay: 0.1s; }
  .bento-item:nth-child(2) { animation-delay: 0.2s; }
  .bento-item:nth-child(3) { animation-delay: 0.3s; }
  .bento-item:nth-child(4) { animation-delay: 0.4s; }
  .bento-item:nth-child(5) { animation-delay: 0.5s; }
  
  /* Responsive Adjustments */
  @media (max-width: 1100px) {
    .blog-layout {
      grid-template-columns: 1fr;
    }
    
    .blog-sidebar {
      position: static;
      margin-top: 2rem;
    }
    
    .sidebar-widget:hover {
      transform: none;
    }
  }
  
  @media (max-width: 768px) {
    .blog-hero h1 {
      font-size: 2.5rem;
    }
    
    .blog-hero .lead {
      font-size: 1.1rem;
    }
    
    .section-title {
      font-size: 1.5rem;
    }
    
    .filter-container {
      align-items: center;
    }
    
    .category-filters {
      justify-content: center;
    }
    
    .search-input {
      max-width: 100%;
    }
  }
  
  /* Dark mode adjustments */
  html.dark .filter-btn {
    background: var(--background-alt);
    border-color: var(--background-alt);
  }
  
  html.dark .filter-btn:hover {
    border-color: var(--primary-color);
  }
  
  html.dark .filter-btn.active {
    background: var(--primary-color);
    border-color: var(--primary-color);
  }
  
  html.dark .no-results-message {
    background: rgba(255, 255, 255, 0.05);
  }
</style>