---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { isFeatureEnabled } from '../config/features';

// Get all thoughtful apps
const allApps = await getCollection('thoughtful-apps');

// Sort apps by excitement and feasibility (for default view)
const apps = allApps.sort((a, b) => {
  const scoreA = (a.data.excitement * 0.6) + (a.data.feasibility * 0.4);
  const scoreB = (b.data.excitement * 0.6) + (b.data.feasibility * 0.4);
  return scoreB - scoreA;
});

// Get unique categories
const categories = [...new Set(apps.map(app => app.data.category))];

// Get unique statuses
const statuses = ['concept', 'exploring', 'prototyping', 'shelved'];

// Status colors and emojis
const statusConfig = {
  concept: { emoji: 'üîµ', label: 'Concept', color: '#3b82f6' },
  exploring: { emoji: 'üü°', label: 'Exploring', color: '#eab308' },
  prototyping: { emoji: 'üü¢', label: 'Prototyping', color: '#22c55e' },
  shelved: { emoji: '‚ö´', label: 'Shelved', color: '#6b7280' }
};
---

<Layout title="Thoughtful App Co." description="A collection of app concepts and ideas - some practical, some moonshots, all thoughtfully designed">
  <div class="thoughtful-apps-page">
    <section class="apps-hero">
      <h1>Thoughtful App Co.</h1>
      <p class="lead">Building apps for hoomans. A collection of thoughtful concepts and ideas.</p>
      <p class="sub-lead">Some practical, some moonshots, all designed with real people in mind.</p>
      <div class="legal-notice">
        <p>‚öñÔ∏è All app concepts are protected intellectual property. <a href="/legal-notice">View Legal Notice</a></p>
      </div>
    </section>

    <section class="apps-filters">
      <div class="filter-group">
        <label class="filter-label">Sort by:</label>
        <select id="sort-select" class="filter-select">
          <option value="excitement">Most Exciting</option>
          <option value="feasibility">Most Feasible</option>
          <option value="votes">Most Wanted</option>
          <option value="recent">Recently Updated</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Status:</label>
        <div class="filter-buttons">
          <button class="filter-btn active" data-filter-type="status" data-filter-value="all">All</button>
          {statuses.map(status => (
            <button class="filter-btn" data-filter-type="status" data-filter-value={status}>
              <span class="status-emoji">{statusConfig[status].emoji}</span>
              {statusConfig[status].label}
            </button>
          ))}
        </div>
      </div>

      <div class="filter-group">
        <label class="filter-label">Category:</label>
        <div class="filter-buttons">
          <button class="filter-btn active" data-filter-type="category" data-filter-value="all">All Categories</button>
          {categories.map(category => (
            <button class="filter-btn" data-filter-type="category" data-filter-value={category}>{category}</button>
          ))}
        </div>
      </div>
    </section>

    <section class="apps-grid">
      {apps.map(app => (
        <article class="app-card two-tone-card" 
          data-status={app.data.status} 
          data-category={app.data.category}
          data-excitement={app.data.excitement}
          data-feasibility={app.data.feasibility}
          data-votes={app.data.voteCount}
          data-updated={app.data.lastUpdated.toISOString()}>
          <a href={`/thoughtful-app-co/${app.slug}`} class="app-card-link">
            <div class="app-card-header">
              <div class="app-status-badge" style={`background-color: ${statusConfig[app.data.status].color}`}>
                <span class="status-emoji">{statusConfig[app.data.status].emoji}</span>
                {statusConfig[app.data.status].label}
              </div>
              <div class="app-category-badge">{app.data.category}</div>
            </div>
            
            <div class="app-card-image">
              <div class="app-image-placeholder">
                <div class="placeholder-icon">üí°</div>
              </div>
            </div>
            
            <div class="app-card-content">
              <h2 class="app-card-title">{app.data.title}</h2>
              <p class="app-card-tagline">{app.data.oneLiner}</p>
              
              <div class="app-metrics">
                <div class="metric-group" data-rating={app.data.feasibility} data-metric="feasibility">
                  <span class="metric-label">Feasibility</span>
                  <div class="metric-stars">
                    {[...Array(5)].map((_, i) => (
                      <span class={`star ${i < app.data.feasibility ? 'filled' : ''}`}>‚≠ê</span>
                    ))}
                  </div>
                  <div class="metric-tooltip"></div>
                </div>
                <div class="metric-group" data-rating={app.data.excitement} data-metric="excitement">
                  <span class="metric-label">Excitement</span>
                  <div class="metric-stars">
                    {[...Array(5)].map((_, i) => (
                      <span class={`star ${i < app.data.excitement ? 'filled' : ''}`}>‚≠ê</span>
                    ))}
                  </div>
                  <div class="metric-tooltip"></div>
                </div>
                <div class="metric-group" data-rating={app.data.seriousness} data-metric="seriousness">
                  <span class="metric-label">Seriousness</span>
                  <div class="metric-stars">
                    {[...Array(5)].map((_, i) => (
                      <span class={`star ${i < app.data.seriousness ? 'filled' : ''}`}>‚≠ê</span>
                    ))}
                  </div>
                  <div class="metric-tooltip"></div>
                </div>
              </div>
              
              <div class="app-card-footer">
                <div class="vote-count">
                  <span class="vote-icon">üëç</span>
                  <span class="vote-number" data-app-id={app.slug}>{app.data.voteCount || 0}</span>
                  <span class="vote-label">votes</span>
                </div>
                <span class="view-details">View Details ‚Üí</span>
              </div>
            </div>
          </a>
        </article>
      ))}
    </section>

    <section class="apps-cta">
      <div class="cta-card card-base card-glow">
        <h2>Have an app idea?</h2>
        <p>I'm always looking for new concepts to explore. If you have an idea that could make people's lives better, I'd love to hear about it!</p>
        <a href="mailto:erikk@shupp.dev?subject=App%20Idea%20for%20Thoughtful%20App%20Co" class="btn btn-primary">Share Your Idea</a>
      </div>
    </section>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const filterButtons = document.querySelectorAll('.filter-btn');
    const appCards = document.querySelectorAll('.app-card');
    const appsGrid = document.querySelector('.apps-grid');

    // Current filters
    let currentStatusFilter = 'all';
    let currentCategoryFilter = 'all';
    let currentSort = 'excitement';

    // Rating descriptions
    const ratingDescriptions = {
      feasibility: {
        1: { name: "Moonshot", desc: "Requires breakthrough technology or massive resources" },
        2: { name: "Challenging", desc: "Significant technical or resource hurdles to overcome" },
        3: { name: "Doable", desc: "Achievable with effort and the right team" },
        4: { name: "Straightforward", desc: "Can be implemented with existing technology" },
        5: { name: "Weekend Project", desc: "Could be built quickly with minimal resources" }
      },
      excitement: {
        1: { name: "Meh", desc: "Solves a minor problem for very few people" },
        2: { name: "Interesting", desc: "Useful but not particularly compelling" },
        3: { name: "Cool", desc: "Solid idea that would attract loyal users" },
        4: { name: "Thrilling", desc: "People would be eager to use this" },
        5: { name: "Exhilarating", desc: "Potential game-changer that people would love" }
      },
      seriousness: {
        1: { name: "Absurd", desc: "Purely playful or experimental idea" },
        2: { name: "Whimsical", desc: "Entertainment-focused with minor practical value" },
        3: { name: "Practical", desc: "Mix of utility and enjoyable experience" },
        4: { name: "Meaningful", desc: "Would genuinely benefit many people's lives" },
        5: { name: "Revolutionary", desc: "Could significantly improve humanity" }
      }
    };

    // Populate tooltips
    const metricGroups = document.querySelectorAll('.metric-group');
    metricGroups.forEach(group => {
      const rating = parseInt(group.getAttribute('data-rating') || '0');
      const metric = group.getAttribute('data-metric') as keyof typeof ratingDescriptions;
      const tooltip = group.querySelector('.metric-tooltip');
      
      if (tooltip && rating && metric && ratingDescriptions[metric]) {
        const ratingData = ratingDescriptions[metric][rating as keyof typeof ratingDescriptions.feasibility];
        tooltip.innerHTML = `<strong>${rating}/5 - ${ratingData.name}</strong><br>${ratingData.desc}`;
      }
    });

    // Filter and sort apps
    const filterAndSortApps = () => {
      // Convert NodeList to Array for sorting
      const cardsArray = Array.from(appCards);
      
      // Filter cards
      cardsArray.forEach(card => {
        const cardElement = card as HTMLElement;
        const status = cardElement.dataset.status;
        const category = cardElement.dataset.category;
        
        const statusMatch = currentStatusFilter === 'all' || status === currentStatusFilter;
        const categoryMatch = currentCategoryFilter === 'all' || category === currentCategoryFilter;
        
        if (statusMatch && categoryMatch) {
          cardElement.style.display = 'block';
        } else {
          cardElement.style.display = 'none';
        }
      });

      // Sort visible cards
      const visibleCards = cardsArray.filter(card => (card as HTMLElement).style.display !== 'none');
      
      visibleCards.sort((a, b) => {
        const aElement = a as HTMLElement;
        const bElement = b as HTMLElement;
        
        switch (currentSort) {
          case 'excitement':
            const aExcitement = parseInt(aElement.dataset.excitement || '0');
            const bExcitement = parseInt(bElement.dataset.excitement || '0');
            return bExcitement - aExcitement;
          
          case 'feasibility':
            const aFeasibility = parseInt(aElement.dataset.feasibility || '0');
            const bFeasibility = parseInt(bElement.dataset.feasibility || '0');
            return bFeasibility - aFeasibility;
          
          case 'votes':
            const aVotes = parseInt(aElement.dataset.votes || '0');
            const bVotes = parseInt(bElement.dataset.votes || '0');
            return bVotes - aVotes;
          
          case 'recent':
            const aDate = new Date(aElement.dataset.updated || '');
            const bDate = new Date(bElement.dataset.updated || '');
            return bDate.getTime() - aDate.getTime();
          
          default:
            return 0;
        }
      });

      // Re-append cards in sorted order
      if (appsGrid) {
        visibleCards.forEach(card => {
          appsGrid.appendChild(card);
        });
      }
    };

    // Handle sort change
    sortSelect.addEventListener('change', (e) => {
      currentSort = (e.target as HTMLSelectElement).value;
      filterAndSortApps();
    });

    // Handle filter buttons
    filterButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const btn = e.currentTarget as HTMLElement;
        const filterType = btn.dataset.filterType;
        const filterValue = btn.dataset.filterValue;

        if (!filterType || !filterValue) return;

        // Update active state
        const siblingButtons = btn.parentElement?.querySelectorAll(`[data-filter-type="${filterType}"]`);
        siblingButtons?.forEach(sibling => sibling.classList.remove('active'));
        btn.classList.add('active');

        // Update current filter
        if (filterType === 'status') {
          currentStatusFilter = filterValue;
        } else if (filterType === 'category') {
          currentCategoryFilter = filterValue;
        }

        filterAndSortApps();
      });
    });

    // Load vote counts from localStorage (Lyket fallback)
    const updateVoteCounts = () => {
      const voteElements = document.querySelectorAll('.vote-number');
      voteElements.forEach(element => {
        const appId = (element as HTMLElement).dataset.appId;
        if (appId) {
          const storedVotes = localStorage.getItem(`thoughtful-apps-votes-${appId}`);
          if (storedVotes) {
            element.textContent = storedVotes;
            // Update the data attribute for sorting
            const card = element.closest('.app-card') as HTMLElement;
            if (card) {
              card.dataset.votes = storedVotes;
            }
          }
        }
      });
    };

    updateVoteCounts();
  });
</script>

<style>
  .thoughtful-apps-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .apps-hero {
    text-align: center;
    padding: 4rem 0 3rem;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));
    border-radius: 12px;
    margin-bottom: 3rem;
    position: relative;
    overflow: hidden;
  }

  html.dark .apps-hero {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
  }

  .apps-hero::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(ellipse at center, transparent, rgba(139, 92, 246, 0.1));
    animation: liquid-wave 20s ease-in-out infinite alternate;
    z-index: 0;
    pointer-events: none;
  }

  @keyframes liquid-wave {
    0% { transform: translate(-10%, -10%) rotate(0deg); }
    100% { transform: translate(10%, 10%) rotate(360deg); }
  }

  .apps-hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #3b82f6, #8b5cf6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    position: relative;
    z-index: 1;
  }

  .apps-hero .lead {
    font-size: 1.25rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
    position: relative;
    z-index: 1;
  }

  .apps-hero .sub-lead {
    font-size: 1rem;
    color: var(--color-tertiary);
    font-weight: 500;
    position: relative;
    z-index: 1;
  }

  html.dark .apps-hero .lead,
  html.dark .apps-hero .sub-lead {
    color: #e5e7eb;
  }

  /* Filters Section */
  .apps-filters {
    margin-bottom: 3rem;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: var(--card-shadow);
  }

  html.dark .apps-filters {
    background: #23232b;
  }

  .filter-group {
    margin-bottom: 1.5rem;
  }

  .filter-group:last-child {
    margin-bottom: 0;
  }

  .filter-label {
    display: block;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-color);
  }

  .filter-select {
    width: 100%;
    max-width: 300px;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: white;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  html.dark .filter-select {
    background: #1a1a22;
    color: #f3f4f6;
    border-color: #374151;
  }

  .filter-select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 30px;
    background: white;
    color: var(--text-color);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  html.dark .filter-btn {
    background: #1a1a22;
    color: #e5e7eb;
    border-color: #374151;
  }

  .filter-btn:hover {
    border-color: #3b82f6;
    color: #3b82f6;
    transform: translateY(-2px);
  }

  .filter-btn.active {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }

  html.dark .filter-btn.active {
    background: #3b82f6;
    color: white;
  }

  .status-emoji {
    font-size: 0.8rem;
  }

  /* Apps Grid */
  .apps-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .app-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    position: relative;
  }

  html.dark .app-card {
    background: #23232b;
  }

  .app-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  .app-card-link {
    display: block;
    color: inherit;
    text-decoration: none;
  }

  .app-card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    background: rgba(0, 0, 0, 0.02);
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }

  html.dark .app-card-header {
    background: rgba(255, 255, 255, 0.02);
    border-bottom-color: rgba(255, 255, 255, 0.05);
  }

  .app-status-badge {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    color: white;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .app-category-badge {
    padding: 0.25rem 0.75rem;
    background: rgba(139, 92, 246, 0.1);
    color: #8b5cf6;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  html.dark .app-category-badge {
    background: rgba(139, 92, 246, 0.2);
    color: #a78bfa;
  }

  .app-card-image {
    height: 200px;
    background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
  }

  html.dark .app-card-image {
    background: linear-gradient(135deg, #1a1a22, #23232b);
  }

  .app-image-placeholder {
    text-align: center;
  }

  .placeholder-icon {
    font-size: 4rem;
    opacity: 0.3;
  }

  .app-card-content {
    padding: 1.5rem;
  }

  .app-card-title {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--text-color);
  }

  .app-card-tagline {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    line-height: 1.5;
  }

  .app-metrics {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .metric-group {
    text-align: center;
  }

  .metric-label {
    font-size: 0.85rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
    text-transform: capitalize;
    cursor: help;
    position: relative;
    border-bottom: 1px dotted var(--text-light);
  }

  /* Tooltip styles */
  .metric-group {
    position: relative;
  }

  .metric-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 10px;
    padding: 10px 15px;
    background: white;
    color: #1f2937;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    font-size: 0.9rem;
    line-height: 1.4;
    width: 250px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
    z-index: 1000;
    pointer-events: none;
  }

  html.dark .metric-tooltip {
    background: #1a1a22;
    color: #f3f4f6;
    border-color: #3a3a42;
  }

  .metric-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 8px solid transparent;
    border-top-color: var(--border-color);
  }

  .metric-group:hover .metric-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .metric-tooltip strong {
    color: var(--primary-color);
    display: block;
    margin-bottom: 5px;
  }

  .metric-stars {
    display: flex;
    justify-content: center;
    gap: 0.1rem;
  }

  .star {
    font-size: 0.9rem;
    opacity: 0.2;
    filter: grayscale(1);
  }

  .star.filled {
    opacity: 1;
    filter: grayscale(0);
  }

  .app-card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 1rem;
    border-top: 1px solid var(--border-color);
  }

  .vote-count {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-light);
  }

  .vote-icon {
    font-size: 1.2rem;
  }

  .vote-number {
    font-weight: 600;
    color: var(--text-color);
  }

  .view-details {
    color: #3b82f6;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .app-card:hover .view-details {
    transform: translateX(5px);
  }

  /* CTA Section */
  .apps-cta {
    margin-top: 4rem;
  }

  .cta-card {
    text-align: center;
    padding: 3rem;
  }

  .cta-card h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--text-color);
  }

  .cta-card p {
    font-size: 1.1rem;
    color: var(--text-light);
    margin-bottom: 2rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  /* Legal Notice */
  .legal-notice {
    margin-top: 1.5rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    position: relative;
    z-index: 1;
  }

  html.dark .legal-notice {
    background: rgba(0, 0, 0, 0.2);
    border-color: rgba(255, 255, 255, 0.1);
  }

  .legal-notice p {
    margin: 0;
    font-size: 0.9rem;
    color: var(--text-color);
    font-weight: 500;
  }

  .legal-notice a {
    color: #3b82f6;
    text-decoration: underline;
    transition: color 0.3s ease;
  }

  .legal-notice a:hover {
    color: #8b5cf6;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .apps-hero h1 {
      font-size: 2.5rem;
    }

    .apps-grid {
      grid-template-columns: 1fr;
    }

    .filter-select {
      max-width: 100%;
    }
  }
</style>