---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Icon from '../../components/Icon/Icon.astro';
import type { CollectionEntry } from 'astro:content';
import RentVsBuyTool from '../../components/tools/RentVsBuy.astro';
import RentVsSellTool from '../../components/tools/RentVsSell.astro';

export async function getStaticPaths() {
  const toolEntries = await getCollection('tools');
  return toolEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<'tools'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Status configuration with Phosphor icon names
const statusConfig = {
  active: { icon: 'CheckCircle', label: 'Active', color: '#22c55e' },
  beta: { icon: 'CircleHalf', label: 'Beta', color: '#eab308' },
  archived: { icon: 'Archive', label: 'Archived', color: '#6b7280' }
};

const status = statusConfig[entry.data.status];

// Format the date
const formattedDate = new Date(entry.data.lastUpdated).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Category icons (Phosphor names)
const categoryIcons = {
  Financial: 'CurrencyDollar',
  Productivity: 'Lightning',
  Health: 'PersonSimpleRun',
  Lifestyle: 'Star',
  Analytics: 'ChartBar',
  Converter: 'ArrowsClockwise'
} as const;

const categoryIcon = categoryIcons[entry.data.category] || 'Wrench';
---

<Layout title={`${entry.data.title} - Open Source Tools`} description={entry.data.description}>
  <div class="tool-detail-page">
    <header class="tool-header">
      <div class="tool-meta">
        <div class="tool-badges">
          <div class="status-badge" style={`background-color: ${status.color}20; border: 2px solid ${status.color}`}>
            <Icon name={status.icon} size={16} color={status.color} weight="duotone" />
            <span style={`color: ${status.color}`}>{status.label}</span>
          </div>
          <div class="category-badge">
            <Icon name={categoryIcon} size={16} weight="duotone" />
            <span>{entry.data.category}</span>
          </div>
          {entry.data.featured && (
            <div class="featured-badge">
              <Icon name="Star" size={16} weight="fill" />
              <span>Featured</span>
            </div>
          )}
        </div>
        {entry.data.githubUrl && (
          <a href={entry.data.githubUrl} target="_blank" rel="noopener noreferrer" class="github-link">
            <Icon name="GithubLogo" size={20} weight="duotone" />
            <span>View Source</span>
          </a>
        )}
      </div>
      
      <h1 class="tool-title">{entry.data.title}</h1>
      <p class="tool-description">{entry.data.description}</p>
      
      {entry.data.originalSource && (
        <div class="attribution">
          <span>Based on:</span>
          <a href={entry.data.originalSource.url} target="_blank" rel="noopener noreferrer">
            {entry.data.originalSource.name}
          </a>
        </div>
      )}
    </header>

     <main class="tool-container">
       <div class="tool-launch-section">
         <div class="launch-content">
           <h2>Try the {entry.data.title}</h2>
           <p>Experience this interactive tool with a clean, distraction-free interface.</p>
           <a href={`/tools/${entry.slug}/app`} class="launch-button">
             <Icon name="Play" size={20} weight="duotone" />
             <span>Launch Tool</span>
           </a>
         </div>
       </div>
     </main>

    <section class="tool-info">
      <div class="info-grid">
        <div class="info-section">
          <h2>About This Tool</h2>
          <div class="tool-content">
            <Content />
          </div>
        </div>

        <aside class="tool-sidebar">
          <div class="sidebar-section">
            <h3>Key Features</h3>
            <ul class="features-list">
              {entry.data.features.map(feature => (
                <li class="feature-item">
                  <Icon name="Check" size={16} color="#22c55e" weight="bold" />
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </div>

          <div class="sidebar-section">
            <h3>Built With</h3>
            <div class="tech-tags">
              {entry.data.technologies.map(tech => (
                <span class="tech-tag">{tech}</span>
              ))}
            </div>
          </div>

          <div class="sidebar-section">
            <h3>Tool Actions</h3>
            <div class="action-buttons">
              <button id="share-btn" class="action-btn">
                <Icon name="Link" size={18} weight="duotone" />
                <span>Share Tool</span>
              </button>
              {entry.data.embedEnabled && (
                <button id="embed-btn" class="action-btn">
                  <Icon name="Code" size={18} weight="duotone" />
                  <span>Embed Code</span>
                </button>
              )}
              <button id="reset-btn" class="action-btn">
                <Icon name="ArrowClockwise" size={18} weight="duotone" />
                <span>Reset Tool</span>
              </button>
            </div>
          </div>

          <div class="sidebar-section">
            <p class="update-date">
              <Icon name="Clock" size={16} weight="duotone" />
              Last updated: {formattedDate}
            </p>
          </div>
        </aside>
      </div>
    </section>

    {entry.data.relatedTools && entry.data.relatedTools.length > 0 && (
      <section class="related-tools">
        <h2>Related Tools</h2>
        <div class="related-grid">
          {entry.data.relatedTools.map(toolSlug => (
            <a href={`/tools/${toolSlug}`} class="related-card">
              <Icon name="ArrowSquareOut" size={20} weight="duotone" />
              <span>{toolSlug}</span>
            </a>
          ))}
        </div>
      </section>
    )}
  </div>

  <script>
    document.getElementById('share-btn')?.addEventListener('click', () => {
      navigator.clipboard.writeText(window.location.href);
      alert('Tool URL copied to clipboard!');
    });

<script>
  // Tool component loader and page initialization
  document.addEventListener('DOMContentLoaded', async () => {
    const toolMount = document.getElementById('tool-mount');
    const componentName = toolMount?.dataset.component;
    
    console.log(`Loading component: ${componentName}`);
    
    try {
      // Clear loading placeholder
      toolMount.innerHTML = '';
      
      // Load the appropriate component
      if (componentName === 'RentVsBuy') {
        const { mount } = await import('../../components/tools/RentVsBuy/mount');
        mount();
      } else if (componentName === 'RentVsSell') {
        const { mount } = await import('../../components/tools/RentVsSell/mount');
        mount();
      } else if (componentName === 'FxSankeyWrapper' || componentName === 'FxSankeyDemo') {
        const { mountFxSankeyDemo } = await import('../../components/FxSankey/mount');
        mountFxSankeyDemo();
      } else {
        toolMount.innerHTML = `<div class="error-message">Component "${componentName}" not found.</div>`;
      }
    } catch (error) {
      console.error('Failed to load component:', error);
      toolMount.innerHTML = '<div class="error-message">Failed to load calculator. Please refresh the page.</div>';
    }
    
    // Share functionality
    const shareBtn = document.getElementById('share-btn');
    shareBtn?.addEventListener('click', async () => {
      const shareData = {
        title: document.title,
        text: `Check out this tool: ${document.title}`,
        url: window.location.href
      };
      
      try {
        if (navigator.share) {
          await navigator.share(shareData);
        } else {
          await navigator.clipboard.writeText(window.location.href);
          alert('Link copied to clipboard!');
        }
      } catch (err) {
        console.error('Error sharing:', err);
      }
    });

    document.getElementById('embed-btn')?.addEventListener('click', () => {
      const embedCode = `<iframe src="${window.location.href}" width="100%" height="600" frameborder="0"></iframe>`;
      navigator.clipboard.writeText(embedCode);
      alert('Embed code copied to clipboard!');
    });

    document.getElementById('reset-btn')?.addEventListener('click', () => {
      window.location.reload();
    });
  </script>
</Layout>

<style>
  .tool-detail-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .tool-header {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border-color);
  }

  .tool-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .tool-badges {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .status-badge,
  .category-badge,
  .featured-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.4rem 0.9rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .status-badge:hover,
  .category-badge:hover,
  .featured-badge:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .category-badge {
    background: rgba(139, 92, 246, 0.1);
    color: #8b5cf6;
    border: 2px solid rgba(139, 92, 246, 0.3);
  }

  .featured-badge {
    background: linear-gradient(135deg, #fbbf24, #f59e0b);
    color: white;
    border: none;
  }

  .github-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 2px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-color);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .github-link:hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
    transform: translateY(-2px);
  }

  .tool-title {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: var(--text-color);
  }

  .tool-description {
    font-size: 1.25rem;
    color: var(--text-light);
    margin-bottom: 1rem;
  }

  .attribution {
    font-size: 0.9rem;
    color: var(--text-light);
  }

  .attribution a {
    color: var(--primary-color);
    text-decoration: none;
  }

  .attribution a:hover {
    text-decoration: underline;
  }

   .tool-container {
     margin: 3rem 0;
   }

   .tool-launch-section {
     background: var(--card-bg);
     border-radius: 12px;
     box-shadow: var(--card-shadow);
     padding: 3rem 2rem;
     text-align: center;
   }

   .launch-content h2 {
     font-size: 2rem;
     margin-bottom: 1rem;
     color: var(--text-color);
   }

   .launch-content p {
     font-size: 1.1rem;
     color: var(--text-light);
     margin-bottom: 2rem;
     max-width: 500px;
     margin-left: auto;
     margin-right: auto;
   }

   .launch-button {
     display: inline-flex;
     align-items: center;
     gap: 0.5rem;
     padding: 1rem 2rem;
     background: var(--primary-color);
     color: white;
     text-decoration: none;
     border-radius: 8px;
     font-weight: 600;
     font-size: 1.1rem;
     transition: all 0.3s ease;
     box-shadow: var(--card-shadow);
   }

   .launch-button:hover {
     background: var(--color-accent);
     transform: translateY(-2px);
     box-shadow: 0 8px 25px rgba(20, 8, 14, 0.2);
   }

  .info-grid {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 3rem;
    margin-top: 3rem;
  }

  .info-section h2 {
    margin-bottom: 1.5rem;
    color: var(--text-color);
  }

  .tool-content {
    color: var(--text-color);
    line-height: 1.8;
  }

  .tool-sidebar {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .sidebar-section {
    padding: 1.5rem;
    background: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--card-shadow);
  }

  .sidebar-section h3 {
    margin-bottom: 1rem;
    color: var(--text-color);
  }

  .features-list {
    list-style: none;
    padding: 0;
  }

  .feature-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 0.5rem 0;
    color: var(--text-color);
  }

  .feature-item span {
    flex: 1;
    line-height: 1.5;
  }

  .tech-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tech-tag {
    padding: 0.25rem 0.75rem;
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
    border-radius: 15px;
    font-size: 0.85rem;
  }

  .action-buttons {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: transparent;
    border: 2px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-color);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-btn:hover {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
    transform: translateY(-2px);
  }

  .update-date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--text-light);
    margin: 0;
  }

  .related-tools {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
  }

  .related-tools h2 {
    margin-bottom: 1.5rem;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
  }

  .related-card {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    background: var(--card-bg);
    border-radius: 8px;
    text-decoration: none;
    color: var(--text-color);
    transition: all 0.3s ease;
  }

  .related-card:hover {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
  }

  @media (max-width: 768px) {
    .info-grid {
      grid-template-columns: 1fr;
    }

    .tool-meta {
      flex-direction: column;
      align-items: flex-start;
    }
  }

  /* Dark mode adjustments */
  html.dark .status-badge,
  html.dark .category-badge {
    background-blend-mode: multiply;
  }

  html.dark .tool-container {
    background: #23232b;
  }

  html.dark .sidebar-section {
    background: #23232b;
  }

  html.dark .tech-tag {
    background: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }

  html.dark .action-btn {
    border-color: #374151;
  }

  html.dark .action-btn:hover {
    border-color: var(--primary-color);
  }
</style>