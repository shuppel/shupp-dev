---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import CardStyles from '../components/CardStyles.astro';

// Get all blog posts
const allPosts = await getCollection('blog');

// Sort posts by date (newest first)
const posts = allPosts.sort((a, b) => {
  return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
});

// Get unique categories
const categories = [...new Set(allPosts.flatMap(post => post.data.categories))];

// Get unique tags
const tags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];

// Pagination configuration
const postsPerPage = 5;
const totalPages = Math.ceil(posts.length / postsPerPage);
const currentPage = 1; // We'll update this via client-side JS
---

<Layout title="Blog" description="Articles and insights on product management, software development, UX design, and more">
  <div class="blog-page">
    <section class="blog-hero">
      <h1>My Blog</h1>
      <p class="lead">Thoughts on product management, software development, and technology trends</p>
    </section>

    <div class="blog-container">
      <main class="blog-main">
        <div class="blog-filters">
          <div class="search-container">
            <input type="text" id="blog-search" placeholder="Search articles..." class="search-input">
          </div>
        </div>

        <div class="blog-grid">
          {posts.map(post => (
            <article class="blog-card card-base card-gradient-border">
              <a href={`/blog/${post.slug}`} class="blog-card-link">
                <div class="card-image">
                  <div class="placeholder-image">
                    {post.data.featuredImage && (
                      <div class="placeholder-text">{post.data.featuredImage}</div>
                    )}
                  </div>
                </div>
                <div class="card-content">
                  <div class="card-meta">
                    <span class="blog-date">{new Date(post.data.pubDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}</span>
                    <span class="blog-read-time">{post.data.readTime}</span>
                  </div>
                  <h2 class="card-title">{post.data.title}</h2>
                  <p class="card-description">{post.data.description}</p>
                  <div class="card-tags">
                    {post.data.categories.map(category => (
                      <span class="card-tag">{category}</span>
                    ))}
                  </div>
                  <div class="read-more-container">
                    <span class="read-more">Read Article</span>
                  </div>
                </div>
              </a>
            </article>
          ))}
        </div>

        {totalPages > 1 && (
          <div class="blog-pagination">
            {Array.from({ length: totalPages }).map((_, index) => (
              <button class={`pagination-btn ${index === 0 ? 'active' : ''}`} data-page={index + 1}>
                {index + 1}
              </button>
            ))}
            {totalPages > 1 && (
              <button class="pagination-btn pagination-next" data-page="2">
                Next â†’
              </button>
            )}
          </div>
        )}
      </main>

      <aside class="blog-sidebar">
        <div class="sidebar-widget">
          <h3 class="widget-title">Categories</h3>
          <ul class="category-list">
            {categories.map(category => (
              <li class="category-item">
                <a href={`/blog?category=${category}`} class="category-link" data-category={category}>{category}</a>
              </li>
            ))}
          </ul>
        </div>

        <div class="sidebar-widget">
          <h3 class="widget-title">Popular Posts</h3>
          <ul class="popular-posts">
            {posts.slice(0, 3).map(post => (
              <li class="popular-post">
                <a href={`/blog/${post.slug}`}>
                  <span class="popular-post-title">{post.data.title}</span>
                  <span class="popular-post-date">{new Date(post.data.pubDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}</span>
                </a>
              </li>
            ))}
          </ul>
        </div>

        <div class="sidebar-widget">
          <h3 class="widget-title">Subscribe</h3>
          <div class="subscribe-form">
            <p>Get notified about new articles and updates.</p>
            <div class="form-group">
              <input type="email" placeholder="Your email address" class="form-input">
              <button class="btn btn-primary">Subscribe</button>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Search functionality
    const searchInput = document.getElementById('blog-search');
    const blogCards = document.querySelectorAll('.blog-card');
    const blogGrid = document.querySelector('.blog-grid');
    const paginationButtons = document.querySelectorAll('.pagination-btn');

    // Number of posts per page
    const postsPerPage = 5;
    let currentPage = 1;
    let filteredPosts = [...blogCards]; // Store all posts for filtering/pagination

    // Function to update post visibility based on pagination
    const updatePostsDisplay = () => {
      if (filteredPosts.length === 0) {
        // No matching posts
        if (blogGrid) {
          blogGrid.innerHTML = '<div class="no-results">No posts match your search criteria.</div>';
        }
        return;
      }

      // Calculate pagination
      const startIndex = (currentPage - 1) * postsPerPage;
      const endIndex = startIndex + postsPerPage;

      // Hide all filtered posts first
      filteredPosts.forEach(post => {
        post.style.display = 'none';
      });

      // Show only posts for current page
      filteredPosts.slice(startIndex, endIndex).forEach(post => {
        post.style.display = 'block';
      });

      // Update pagination buttons
      if (paginationButtons.length) {
        updatePaginationButtons();
      }
    };

    // Update pagination buttons active state
    const updatePaginationButtons = () => {
      const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

      // Update page number buttons
      paginationButtons.forEach(button => {
        if (button.classList.contains('pagination-next')) {
          // Update next button
          const nextPage = Math.min(currentPage + 1, totalPages);
          button.setAttribute('data-page', nextPage.toString());
          button.style.display = currentPage < totalPages ? 'block' : 'none';
        } else {
          // Regular page buttons
          const buttonPage = parseInt(button.getAttribute('data-page'));
          if (buttonPage) {
            button.classList.toggle('active', buttonPage === currentPage);
            // Hide page buttons beyond total pages
            button.style.display = buttonPage <= totalPages ? 'block' : 'none';
          }
        }
      });
    };

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        const searchTerm = searchInput.value.toLowerCase();

        // Filter posts based on search term
        filteredPosts = [...blogCards].filter(card => {
          const title = card.querySelector('.blog-title')?.textContent.toLowerCase() || '';
          const excerpt = card.querySelector('.blog-excerpt')?.textContent.toLowerCase() || '';
          const categories = Array.from(card.querySelectorAll('.blog-category')).map(cat => cat.textContent.toLowerCase());

          return title.includes(searchTerm) ||
                 excerpt.includes(searchTerm) ||
                 categories.some(cat => cat.includes(searchTerm));
        });

        // Reset to first page when search changes
        currentPage = 1;
        updatePostsDisplay();
      });
    }

    // Pagination click handlers
    paginationButtons.forEach(button => {
      button.addEventListener('click', () => {
        const newPage = parseInt(button.getAttribute('data-page'));
        if (newPage && newPage !== currentPage) {
          currentPage = newPage;
          updatePostsDisplay();
          // Scroll back to top of blog section
          document.querySelector('.blog-container')?.scrollIntoView({ behavior: 'smooth' });
        }
      });
    });

    // Category filtering
    const categoryLinks = document.querySelectorAll('.category-link');

    categoryLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();

        const selectedCategory = link.getAttribute('data-category').toLowerCase();

        // Filter posts based on category
        filteredPosts = [...blogCards].filter(card => {
          const cardCategories = Array.from(card.querySelectorAll('.blog-category')).map(cat =>
            cat.textContent.toLowerCase()
          );
          return cardCategories.includes(selectedCategory);
        });

        // Reset to first page and update display
        currentPage = 1;
        updatePostsDisplay();

        // Update active state for category links
        categoryLinks.forEach(catLink => {
          catLink.classList.remove('active');
        });
        link.classList.add('active');

        // Reset search input
        if (searchInput) {
          searchInput.value = '';
        }
      });
    });

    // Handle URL query parameters for filtering
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');

    if (categoryParam) {
      // Find the corresponding category link and click it to apply filter
      const categoryLink = Array.from(categoryLinks).find(link =>
        link.getAttribute('data-category').toLowerCase() === categoryParam.toLowerCase()
      );

      if (categoryLink) {
        categoryLink.click();
      }
    } else {
      // Initial pagination setup if no category filter
      updatePostsDisplay();
    }
  });
</script>

<style>
  .blog-page {
    max-width: 1200px;
    margin: 0 auto;
  }

  .blog-hero {
    text-align: center;
    padding: 4rem 0 3rem;
  }

  .blog-hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
  }

  .blog-hero .lead {
    font-size: 1.25rem;
    max-width: 700px;
    margin: 0 auto;
    color: var(--text-light);
  }

  .blog-container {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 3rem;
    margin-top: 2rem;
  }

  .blog-filters {
    margin-bottom: 2rem;
  }

  .search-container {
    width: 100%;
    max-width: 500px;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--primary-color);
  }

  .blog-grid {
    display: grid;
    gap: 2.5rem;
    margin-bottom: 2.5rem;
  }

  .blog-card {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .blog-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .blog-card-link {
    display: block;
    color: inherit;
    text-decoration: none;
  }

  .blog-card-image {
    height: 200px;
    overflow: hidden;
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, var(--primary-color), var(--primary-dark));
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
  }

  .placeholder-text {
    font-size: 1.5rem;
  }

  .blog-card-content {
    padding: 1.5rem;
  }

  .blog-card-meta {
    display: flex;
    justify-content: space-between;
    color: var(--text-light);
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .blog-title {
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
    transition: color 0.2s ease;
  }

  .blog-card:hover .blog-title {
    color: var(--primary-color);
  }

  .blog-excerpt {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .blog-categories {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .blog-category {
    background: var(--background-alt);
    color: var(--text-light);
    font-size: 0.8rem;
    padding: 0.25rem 0.7rem;
    border-radius: 4px;
  }

  .blog-pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .pagination-btn, .pagination-ellipsis {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: white;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .pagination-btn:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
  }

  .pagination-btn.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  .pagination-ellipsis {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: default;
  }

  /* Sidebar */
  .blog-sidebar {
    position: sticky;
    top: 2rem;
    align-self: start;
  }

  .sidebar-widget {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: var(--card-shadow);
    margin-bottom: 2rem;
  }

  .widget-title {
    margin-bottom: 1.25rem;
    position: relative;
    padding-bottom: 0.75rem;
    font-size: 1.25rem;
  }

  .widget-title::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 40px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 3px;
  }

  .category-list {
    list-style: none;
    padding: 0;
  }

  .category-item {
    margin-bottom: 0.75rem;
  }

  .category-link {
    display: block;
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.2s ease;
    padding: 0.25rem 0;
  }

  .category-link:hover, .category-link.active {
    color: var(--primary-color);
  }

  .popular-posts {
    list-style: none;
    padding: 0;
  }

  .popular-post {
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .popular-post:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }

  .popular-post a {
    display: block;
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .popular-post a:hover {
    color: var(--primary-color);
  }

  .popular-post-title {
    display: block;
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .popular-post-date {
    display: block;
    font-size: 0.85rem;
    color: var(--text-light);
  }

  .subscribe-form p {
    margin-bottom: 1rem;
    color: var(--text-light);
  }

  .form-group {
    display: grid;
    gap: 0.75rem;
  }

  .form-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    font-size: 0.9rem;
  }

  .form-input:focus {
    outline: none;
    border-color: var(--primary-color);
  }

  @media (max-width: 900px) {
    .blog-container {
      grid-template-columns: 1fr;
    }

    .blog-sidebar {
      position: static;
      margin-top: 3rem;
    }
  }

  .no-results {
    padding: 3rem 1rem;
    text-align: center;
    color: var(--text-light);
    font-size: 1.1rem;
  }

  @media (max-width: 768px) {
    .blog-hero h1 {
      font-size: 2.5rem;
    }

    .blog-card-image {
      height: 180px;
    }
  }

  html.dark .blog-card,
  html.dark .sidebar-widget {
    background: var(--background-alt);
    color: var(--text-color);
  }
</style>