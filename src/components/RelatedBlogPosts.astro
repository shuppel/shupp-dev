---
import { getCollection } from 'astro:content';

interface Props {
  blogSlugs: string[];
}

const { blogSlugs } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// Filter to only get the related posts
const relatedPosts = allPosts.filter(post => 
  blogSlugs.includes(post.slug)
);

// Sort by date
relatedPosts.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);
---

{relatedPosts.length > 0 && (
  <div class="related-posts">
    <h2 class="related-title">Related Articles</h2>
    <div class="related-grid">
      {relatedPosts.map(post => (
        <a href={`/blog/${post.slug}`} class="related-post">
          <div class="post-image">
            {post.data.featuredImage && (
              <div class="placeholder-image">{post.data.featuredImage}</div>
            )}
          </div>
          <div class="post-content">
            <h3 class="post-title">{post.data.title}</h3>
            <p class="post-excerpt">{post.data.description}</p>
            <div class="post-meta">
              <span class="post-date">
                {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </span>
              {post.data.readTime && (
                <span class="post-read-time">{post.data.readTime}</span>
              )}
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>
)}

<style>
  .related-posts {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
  }
  
  .related-title {
    font-size: 1.75rem;
    margin-bottom: 1.5rem;
    position: relative;
    padding-bottom: 0.5rem;
  }
  
  .related-title::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 50px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 3px;
  }
  
  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .related-post {
    display: flex;
    flex-direction: column;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    transition: all 0.3s ease;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }
  
  .related-post:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.1);
  }
  
  .post-image {
    height: 0;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    position: relative;
    overflow: hidden;
  }
  
  .placeholder-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, var(--primary-color), var(--primary-dark));
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
  }
  
  .post-content {
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }
  
  .post-title {
    font-size: 1.2rem;
    margin-bottom: 0.75rem;
    transition: color 0.2s ease;
  }
  
  .related-post:hover .post-title {
    color: var(--primary-color);
  }
  
  .post-excerpt {
    color: var(--text-light);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    line-height: 1.5;
    flex-grow: 1;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .post-meta {
    display: flex;
    justify-content: space-between;
    color: var(--text-light);
    font-size: 0.8rem;
  }
  
  /* Dark mode adjustments */
  html.dark .related-post {
    background: var(--background-alt);
  }
  
  @media (max-width: 768px) {
    .related-grid {
      grid-template-columns: 1fr;
    }
    
    .related-post:hover {
      transform: none;
    }
  }
</style>