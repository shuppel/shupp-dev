---
import { getCollection } from 'astro:content';
import CredentialBadge from './CredentialBadge.astro';

// Get all credentials
const credentials = await getCollection('credentials', (entry) => {
  return entry.data.visible !== false; // Only show visible credentials
});

// Sort by issueDate (newest first) and featured status
const sortedCredentials = credentials.sort((a, b) => {
  // Featured credentials come first
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  
  // Then sort by issue date (newest first)
  return new Date(b.data.issueDate).getTime() - new Date(a.data.issueDate).getTime();
});

// Group by category
const credentialsByCategory = sortedCredentials.reduce((acc, credential) => {
  const category = credential.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(credential);
  return acc;
}, {} as Record<string, typeof credentials>);

// Get all categories in order
const categories = Object.keys(credentialsByCategory);

interface Props {
  showFeaturedOnly?: boolean;
  layout?: 'grid' | 'carousel';
  maxPerCategory?: number;
}

const { 
  showFeaturedOnly = false, 
  layout = 'grid',
  maxPerCategory
} = Astro.props;

// Filter credentials if needed
const filteredCategories = showFeaturedOnly 
  ? categories.filter(category => 
      credentialsByCategory[category].some(cred => cred.data.featured)
    )
  : categories;
---

<div class="credentials-container">
  {filteredCategories.map(category => (
    <div class="category-section">
      <h3 class="category-title">{category}</h3>
      
      <div class={`credentials-${layout}`}>
        {credentialsByCategory[category]
          .filter(cred => !showFeaturedOnly || cred.data.featured)
          .slice(0, maxPerCategory || undefined)
          .map(credential => (
            <CredentialBadge credential={credential} />
          ))
        }
      </div>
      
      {maxPerCategory && credentialsByCategory[category].length > maxPerCategory && (
        <div class="view-more">
          <a href={`/credentials#${category.toLowerCase().replace(/\s+/g, '-')}`}>
            View {credentialsByCategory[category].length - maxPerCategory} more
          </a>
        </div>
      )}
    </div>
  ))}
</div>

<style>
  .credentials-container {
    display: flex;
    flex-direction: column;
    gap: 2.5rem;
    margin: 2rem 0;
  }
  
  .category-section {
    margin-bottom: 1rem;
  }
  
  .category-title {
    font-size: 1.25rem;
    margin-bottom: 1.5rem;
    position: relative;
    display: inline-block;
    padding-bottom: 0.5rem;
  }
  
  .category-title::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0;
    width: 40px;
    height: 3px;
    background: var(--primary-color);
    border-radius: 3px;
  }
  
  .credentials-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 2rem;
    align-items: center;
    justify-items: center;
  }
  
  .credentials-carousel {
    display: flex;
    gap: 1.5rem;
    overflow-x: auto;
    padding: 1rem 0.5rem;
    scroll-snap-type: x mandatory;
    scrollbar-width: thin;
    -webkit-overflow-scrolling: touch;
  }
  
  .credentials-carousel > * {
    scroll-snap-align: center;
    flex-shrink: 0;
  }
  
  .view-more {
    text-align: center;
    margin-top: 1rem;
  }
  
  .view-more a {
    display: inline-block;
    color: var(--primary-color);
    font-size: 0.9rem;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
  }
  
  .view-more a:hover {
    color: var(--primary-dark);
    text-decoration: underline;
  }
  
  @media (max-width: 768px) {
    .credentials-grid {
      grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
      gap: 1.5rem;
    }
  }
</style>